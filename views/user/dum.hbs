const { google } = require("googleapis");
const { MongoClient } = require("mongodb");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

// Load the Google Sheets API credentials
const credentials = JSON.parse(
  fs.readFileSync(path.join(__dirname, "./credentials.json"))
);

// Configure MongoDB
const url = process.env.MONGODB_URL;
const dbName = "indianedudashboard";
const collectionName = "client";

// Authenticate with Google Sheets API
const auth = new google.auth.GoogleAuth({
  credentials,
  scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
});

async function updateDatabase() {
  const sheets = google.sheets({ version: "v4", auth });
  const spreadsheetId = "1UZYtJRvlT7yZLae32ScaoamWGdigF_4_eqJhaBeGnD0"; // Replace with your actual spreadsheet ID
  const range = "Sheet1"; // Fetch all data in Sheet1

  // Fetch data from Google Sheets
  const response = await sheets.spreadsheets.values.get({
    spreadsheetId,
    range,
  });

  const rows = response.data.values;
  if (rows.length) {
    const client = new MongoClient(url, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    await client.connect();
    const db = client.db(dbName);
    const collection = db.collection(collectionName);

    // Log the rows for debugging
    console.log("Rows fetched from Google Sheets:", rows);

    // Step 1: Prepare data to be updated or inserted
    for (const row of rows) {
    const dataToUpdate = {
      studentid: row[1] || "nill", // "studentid"
      applicationNo: row[34] || "nill", // "enrollmentNo"
      assign: row[35] || "nill", // "applicationNo"
      batch: row[32] || "nill", // "semesterStatus"
      city: row[9] || "nill", // "city"
      course: row[4] || "nill", // "course"
      date: row[0] || "nill", // "date"
      dateOfRefundInitiatedIeh: row[26] || "nill", // "iehrefundinitiated"
      dateOfRefundInitiatedUni: row[24] || "nill", // "dateOfRefundInitiateduni"
      degreeType: row[30] || "nill", // "feePaidAmount"
      docApprovedDate: row[22] || "nill", // "docApprovedDate"
      documentStatus: row[21] || "nill", // "documentStatus"
      email: row[6] || "nill", // "email"
      enrollmentNo: row[33] || "nill", // "batch"
      feePaid: row[28] || "nill", // "scholarship"
      feePaidAmount: row[29] || "nill", // "feepaid"
      iehRefundInitiated: row[25] || "nill", // "nill"
      initialDate: row[17] || "nill", // "initialDate"
      initialRegistration: row[16] || "nill", // "initialRegistration"
      intake: row[13] || "nill", // "intake"
      mentor: row[2] || "nill", // "mentor"
      mentorshipStatus: row[14] || "nill", // "mentorshipStatus"
      message: row[18] || "nill", // "Message"
      mobile: row[7] || "nill", // "mobile"
      name: row[3] || "nill", // "name"
      role: row[10] || "nill", // "role"
      scholarship: row[27] || "nill", // "dateOfRefundInitiatedieh"
      semesterStatus: row[31] || "nill", // "degreeType"
      servicePack: row[12] || "nill", // "servicePack"
      specialization: row[5] || "nill", // "specialization"
      specificName: row[11] || "nill", // "specificName"
      state: row[8] || "nill", // "state"
      uniRefundInitiated: row[23] || "nill", // "unirefundinitiated"
      university: row[15] || "nill", // "university"
      universityPaid: row[19] || "nill", // "universityPaid"
      universityPaidDate: row[20] || "nill", // "universityPaidDate"
    };



      // Log dataToUpdate for each row
      console.log("Data to be updated/inserted:", dataToUpdate);

      // Update the document if it exists, otherwise insert a new one
      await collection.updateOne(
        { studentid: dataToUpdate.studentid },
        { $set: dataToUpdate },
        { upsert: true }
      );
    }

    console.log("Database updated successfully.");
    client.close();
  } else {
    console.log("No data found in the spreadsheet.");
  }
}

module.exports = updateDatabase;
