<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Leads</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Favicon -->
    <link href="img/favicon.ico" rel="icon">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Heebo:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
 <!-- Add necessary meta tags and links to CSS/JS files -->
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css" rel="stylesheet">
  <!-- Bootstrap JS -->
  <!-- DataTables JS -->
  <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <!-- Libraries Stylesheet -->
    <link href="lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="lib/tempusdominus/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />

    <!-- Customized Bootstrap Stylesheet -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="css/style.css" rel="stylesheet">
   <style>
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap');

.search{
  
  top:6px;
  left:10px;
}

.form-control{
    
    border:none;
    padding-left:32px;
}
.tt {
    margin-top: 20px;
    padding: 70px;
    border-radius: 10px;background-color: #f2f9f6; /* Very pale mint green */

}
.btn-primary{
    font-size: 10px;
    background-color: #007bff !important;
}
select,textarea{
       font-size: 13px !important;
}
.table-responsive{
    padding: 10px;
}
.form-control:focus{
    
    border:none;
    box-shadow:none;
}

.green{
    
    color:green;
}
/* Button styles */
.btn-status {
    font-size: 10px; /* Smaller font size for buttons */
    padding: 4px 8px; /* Smaller padding for buttons */
    transition: background-color 0.3s ease;
}

.btn-not-paid {
    background-color: #e8172c; /* Red */
    color: #fff;
}

.btn-paid {
    background-color: #28a745; /* Green */
    color: #fff;
}

.btn-not-approved {
    background-color: #ffc107; /* Yellow */
    color: #000;
}

.btn-approved {
    background-color: #17a2b8; /* Teal */
    color: #fff;
}

.btn-not-done {
    background-color: #ffc107; /* Yellow */
    color: #000;
}

.btn-done {
    background-color: #28a745; /* Green */
    color: #fff;
}

.btn-status.active-paid {
    background-color: #28a745 !important; /* Green */
    color: #fff;
}

.btn-status.active-not-paid {
    background-color: #dc3545 !important; /* Red */
    color: #fff;
}

.btn-status.active-not-approved {
    background-color: #ffc107 !important; /* Yellow */
    color: #000;
}
/* Container for table */
.table-wrapper {
    position: relative; /* To contain the sticky header */
    overflow: auto; /* Allows the table body to scroll */
    height: 450px; /* Set a height for the scrolling area */
}

/* Ensure the table takes the full width of its container */
.table {
    width: 100%;
    border-collapse: collapse;
    font-size: 10px; /* Smaller font size for table content */
    table-layout: fixed; /* Ensures fixed widths are respected */
    background-color: #fff !important; /* Solid background color for visibility */
}

/* Ensure the table header stays fixed at the top */
.table thead {
    position: sticky;
    top: 0;
    background-color: #fff !important; /* Solid background color for visibility */
    z-index: 2; /* Ensure it stays on top of other content */
}

/* Table header and cells styling */
.table thead th,
.table tbody td {
    text-align: left;
    padding: 6px; /* Reduced padding for a smaller appearance */
    border: 1px solid #dee2e6;
    font-size: 10px; /* Consistent smaller font size */
    width: 120px; /* Fixed width for consistency */
    font-family: Arial, Helvetica, sans-serif;
    overflow: hidden; /* Prevent overflow for fixed-width cells */
    text-overflow: ellipsis; /* Add ellipsis for overflowed text */
    white-space: nowrap; /* Prevent text wrapping */
}
input, select ,textarea{
font-size: 10px !important;
color: black !important;
background-color: #eaeef2 !important;
}


.btn ,button{
   font-size: 10px !important;
}
.table thead th {
    background-color: #232f65;
    color: #ffffff;
}

.table tbody tr:hover {
    background-color: #d0e3ff; /* Hover color for rows */
}
/* Adjust other table-related styles if necessary */


.btn-status.active-approved {
    background-color: #17a2b8 !important; /* Teal */
    color: #fff;
}

.btn-status.active-not-done {
    background-color: #ffc107 !important; /* Yellow */
    color: #000;
}

.btn-status.active-done {
    background-color: #28a745 !important; /* Green */
    color: #fff;
}
/* DataTables styles */
.dataTables_wrapper .dataTables_filter {
    float: right;
    text-align: right;
    margin-bottom: 10px; /* Add margin below the search bar */
}

.dataTables_wrapper .dataTables_filter input {
    margin-left: 0.5em;
    display: inline-block;
    width: auto;
    margin-bottom: 10px; /* Add margin below the search bar */
        position: sticky !important;
}

.dataTables_wrapper .dataTables_length {
    float: left;
    margin-bottom: 10px; /* Add margin below the length dropdown */
}

.dataTables_wrapper .dataTables_info {
    float: left;
    margin-top: 10px; /* Add margin above the info text */
}

.dataTables_wrapper .dataTables_paginate {
    float: right;
    margin-top: 10px; /* Add margin above the pagination controls */

}
.btn-glass:hover{
    background-color: #007bff !important;
}
    #dataTable {
    table-layout: auto;
    width: 50px ;
}

#dataTable th, #dataTable td {
    white-space: nowrap;
    padding: 8px 12px; /* Adjust padding as needed */
}
.animated-btn {
    position: relative;
    overflow: hidden;
    transition: transform 0.3s ease-in-out;
}

.animated-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 300%;
    height: 300%;
    background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 80%);
    transition: transform 0.3s ease-in-out;
    transform: translate(-50%, -50%) scale(0);
    z-index: 0;
}

.animated-btn:hover::before {
    transform: translate(-50%, -50%) scale(1);
}

.animated-btn:hover {
    transform: scale(1.05);
}

.animated-btn {
    position: relative;
    overflow: hidden;
    transition: transform 0.3s ease-in-out;
    font-weight: bold;
}

.animated-btn:after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255,255,255,0.4);
    transition: opacity 0.3s ease-in-out;
    opacity: 0;
    z-index: 1;
}

.animated-btn:hover:after {
    opacity: 1;
}

.animated-btn {
    background: linear-gradient(45deg, #007bff, #0056b3);
    border: none;
    color: white;
    padding: 5px 10px;
    font-size: 10px;
    border-radius: 5px;
    text-transform: uppercase;
    cursor: pointer;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
.circular-btn {
    border-radius: 20% !important;
    font-size: 12px !important;
}
</style>

</head>

<body>
    <div class="container-xxl position-relative bg-white d-flex p-0" style="background-color: #232f65;">
        <!-- Spinner Start -->
        <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <!-- Spinner End -->



  <!-- Sidebar Start -->
        <div class="sidebar pe-4 pb-3" style="background-color: #232f65;">
            <nav class="navbar " style="background-color: #232f65;">
                <a href="index.html" class="navbar-brand mx-4 mb-3">
                    <h3 class="text-primary"> <img src="/images/indian-hub-logo-vert-white-e1662813826792.png" alt="Indian Edu Hub Logo" class="log"></h3>
                </a>
                <div class="d-flex align-items-center ms-4 mb-4" style="background-color: #232f65;">
                      
                    <div class="ms-3" >
                        <h6 class="mb-0 text-white">Indianeduhub</h6>
                        <span style="color: rgb(209, 211, 212);">Lead owner</span>
                    </div>
                </div>
                <div class="navbar-nav w-100" style="background-color: #232f65;">
                    <a href="/crm-lead-owner-dashboard" class="nav-item nav-link text-white "><i class="fa fa-tachometer-alt me-2 text-dark"></i>Dashboard</a>
                    <div class="nav-item dropdown">
                        <a href="#" class="nav-link dropdown-toggle text-dark active" data-bs-toggle="dropdown"><i class="fa fa-laptop me-2 "></i>Leads</a>
                        <div class="dropdown-menu bg-transparent border-0">
                            <a href="/crm-lead-owner-details" class="dropdown-item active">Lead-details</a>
                        </div>
                           
                    </div>
                     <div class="nav-item dropdown">
                        <a href="/affiliate-partner-signup" class="nav-link  text-white" class="nav-item nav-link text-dark active"><i class="fa fa-user text-dark me-2"></i>My Referral</a>
                       
                    </div>
                </div>
                
            </nav>
        </div>
        <!-- Sidebar End -->



        <!-- Content Start -->
        <div class="content">
            <!-- Navbar Start -->
            <nav class="navbar navbar-expand bg-light navbar-light sticky-top px-4 py-0">
                <a href="index.html" class="navbar-brand d-flex d-lg-none me-4">
                    <h2 class="text-primary mb-0"><img src="/img/ie.png" alt="Indian Edu Hub Logo" style="height: 30px;"></h2>
                </a>
                <a href="#" class="sidebar-toggler flex-shrink-0">
                    <i class="fa fa-bars"></i>
                </a>
                <form class="d-none d-md-flex ms-4">
                    <input class="form-control border-0" type="search" placeholder="Search">
                </form>
                <div class="navbar-nav align-items-center ms-auto">
                    
                    <div class="nav-item dropdown">
                        <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                            <i class="fa fa-bell me-lg-2"></i>
                            <span class="d-none d-lg-inline-flex">Notificatin</span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0">
                            <a href="#" class="dropdown-item">
                                <h6 class="fw-normal mb-0">Profile updated</h6>
                                <small>15 minutes ago</small>
                            </a>
                       
                            <hr class="dropdown-divider">
                            <a href="#" class="dropdown-item text-center">See all notifications</a>
                        </div>
                    </div>
                    <div class="nav-item dropdown">
                        <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                            <img class="rounded-circle me-lg-2" src="/images/anon.webp" alt="" style="width: 40px; height: 40px;">
                            <span class="d-none d-lg-inline-flex">{{userName}}</span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0">
                            <a href="#" class="dropdown-item">Log Out</a>
                        </div>
                    </div>
                </div>
            </nav>
            <!-- Navbar End -->
<!-- Rest of your template code -->


{{!-- <div class="d-flex justify-content-end mb-3">
    <button id="hideColumnsBtn" class="btn btn-sm btn-primary">Minimize Some Fields</button>
</div> --}}
<div class="d-flex justify-content-end mb-3 mt-3">
    <button id="hideColumnsBtn" class="btn btn-sm btn-primary animated-btn">Hide Some Fields</button>
     <div class=" mx-2">
                <select id="dateFilter" class="form-select form-select-sm" style="width: 150px; display: inline-block;">
                    <option selected value="" disabled>Select New Leads</option>
                    <option value="today">Today</option>
                    <option value="yesterday">Yesterday</option>
                    <option value="this-week">This Week</option>
                    <option value="last-month">Last Month</option>
                </select>
            </div>
</div>
 
<div class="filter-card glassmorphism p-2 shadow-lg d-flex">
    <div class="floating-label-wrapper ms-3">
        <label for="filterDateRange" class="floating-label">Date Range</label>
        <input type="text" id="filterDateRange" class="form-control shadow-sm circular-input" placeholder="Select Date Range">
    </div>

    <!-- <div class="floating-label-wrapper ms-3">
        <label for="filterSingleDate" class="floating-label">Single Date</label>
        <input type="text" id="filterSingleDate" class="form-control shadow-sm circular-input" placeholder="Select Single Date">
    </div> -->

    <div class="floating-label-wrapper ms-3">
        <label for="filterState" class="floating-label">State</label>
        <input type="text" id="filterState" class="form-control shadow-sm circular-input" placeholder="Enter State">
    </div>

    <div class="floating-label-wrapper ms-3">
        <label for="filterCity" class="floating-label">City</label>
        <input type="text" id="filterCity" class="form-control shadow-sm circular-input" placeholder="Enter City">
    </div>

    <!-- New course filter input -->
    <div class="floating-label-wrapper ms-3">
        <label for="filterCourse" class="floating-label">Course</label>
        <input type="text" id="filterCourse" class="form-control shadow-sm circular-input" placeholder="Enter Course">
    </div>

    <div class="floating-label-wrapper ms-3">
        <label for="stageFilter" class="floating-label">Stage</label>
        <input type="text" id="stageFilter" class="form-control form-control-sm" placeholder="Enter Stage" onkeyup="filterTable()">
    </div>

    <div class="floating-label-wrapper ms-3">
        <label for="substageFilter" class="floating-label">Substage</label>
        <input type="text" id="substageFilter" class="form-control form-control-sm" placeholder="Enter Substage" onkeyup="filterTable()">
    </div>

    <button id="applyFiltersBtn" class="btn btn-glass shadow-sm circular-btn ms-3">
        <i class="bi bi-filter-circle"></i> 
    </button>

    <button id="clearFiltersBtn" class="btn btn-danger shadow-sm circular-btn ms-3">
        <i class="fas fa-times-circle"></i> 
    </button>
</div>





   <div class="table-responsive">
    <div class="table-wrapper">
        <!-- Dropdown for Filtering Assign Date -->
         <table class="table" id="dataTable">
                        <thead>
                            <tr>
                                <!-- Define table headers -->
                                <th hidden>ID</th>
                                <th hidden>Assign date</th>
                                <th hidden>ReferredBy</th>
                                <th>ID</th>
                                <th>Time Stamp</th>
                                <th>Source</th>
                                <th>State</th>
                                <th  class="sticky">Name</th>
                                <th  class="sticky-second">WhatsApp</th>
                                <th  class="sticky-third">Mobile</th>
                                <th>Uni 1</th>
                                <th>Uni 2</th>
                                <th>Uni 3</th>
                                <th>Uni 4</th>
                                <th>Budget</th>
                                <th>City</th>
                                <th class="sticky-fourth">Course</th>
                                <th>Current Salary</th>
                                <th>Description</th>
                                <th>Email</th>
                                <th>Employee Location</th>
                                <th>Expected Salary</th>
                                <th>Experience</th>
                                <th>Exposure</th>
                                <th>Previous Qualification</th>
                                <th>Previous University</th>
                                <th>Sector</th>
                                <th>Specialization</th>
                                <th>Role</th>
                                <th>PDF Link</th>
                                <th>Password</th>
                                <th>Main Stage</th>
                                <th>Lead Stage</th>
                                <th>Lead Sub-Stage</th>
                                <th>Follow Up</th>
                                <th>Lead Status</th>
                                <th>Action</th>
                                <th>Lead Status</th>
                                <th>Send</th>
                                <th>SE</th>
                                  <th >DOA</th>
                                 <th>Save DOA</th>
                                 <th>SE Client</th>
                            </tr>
                        </thead>
                        <tbody>
                            {{#each googlesheets}}
                           <tr data-assign-date="{{this.assignDate}}">
                                <td hidden>{{this._id}}</td>
                              <td hidden>{{this.assignDate}} </td>
                                 <td hidden>{{this.ReferredBy}}</td>
                                <td>{{this.id}}</td>
                                <td>{{this.timeStamp}}</td>
                                <td>{{this.source}}</td>
                                <td>{{this.state}}</td>
                                <td class="sticky ">{{this.name}}</td>
                                <td class="sticky-second ">{{this.whatsapp}}</td>
                                <td class="sticky-third ">{{this.mobile}}</td>
                                <td>{{this.uni1}}</td>
                                <td>{{this.uni2}}</td>
                                <td>{{this.uni3}}</td>
                                <td>{{this.uni4}}</td>
                                <td>{{this.budget}}</td>
                                <td>{{this.city}}</td>
                                <td class="sticky-fourth ">{{this.course}}</td>
                                <td>{{this.currSalary}}</td>
                                <td>{{this.description}}</td>
                                <td>{{this.email}}</td>
                                <td>{{this.empLocation}}</td>
                                <td>{{this.expSalary}}</td>
                                <td>{{this.experience}}</td>
                                <td>{{this.exposure}}</td>
                                <td>{{this.prevQualification}}</td>
                                <td>{{this.prevUniversity}}</td>
                                <td>{{this.sector}}</td>
                                <td>{{this.specialization}}</td>
                                <td>{{this.role}}</td>
                                <td><a href="{{this.pdfLink}}" target="_blank">Link</a></td>
                                <td>{{this.password}}</td>
    <td>
  <select class="form-select main-stage-select" style="width: 150px;" onchange="updateStageOptions(this)">
    <option value="">Select Main Stage</option>
    {{#each ../leadStage}}
      <option value="{{this.mainStage}}">{{this.mainStage}}</option>
    {{/each}}
  </select>
</td>
<td>
  <select class="form-select lead-stage-select" style="width: 150px;" onchange="updateSubStageOptions(this)">
    <option value="">Select Stage</option>
    <!-- Stages will be populated dynamically based on Main Stage selection -->
  </select>
</td>
<td>
  <select class="form-select sub-stage-select" style="width: 150px;">
    <option value="">Select Sub-Stage</option>
  </select>
</td>

        <td>
            {{#if (shouldShowFollowUp this.leadStage)}}
            <div class="follow-up-container">
                <input type="date" class="form-control follow-up-date" style="width: 150px; display: inline-block;">
                <input type="time" class="form-control follow-up-time" style="width: 120px; display: inline-block;">
            </div>
            {{else}}
            <span>No Follow Up Needed</span>
            {{/if}}
        </td>
        <td>
            <textarea class="form-control lead-status-textarea" rows="2" style="width: 250px;">
                {{#if this.leadStatus.[this.leadStage]}}
                    {{this.leadStatus.[this.leadStage]}}
                {{/if}}
            </textarea>
        </td>

        <td>
            <button class="btn-sm btn-primary" onclick="saveLeadStatus(this)">Save</button>
        </td>
        <td>
            <button class="btn btn-info ms-2 show-lead-status-btn" style="font-size: 10px !important;" data-bs-toggle="modal" data-bs-target="#leadStatusModal" onclick="showLeadStatus(this)">Status</button>
            <div class="leadStatusContent" style="display:none;">
                {{json this.leadStatus}}
            </div>
        </td>
    <td>
  <a href="#" data-bs-toggle="modal" data-bs-target="#whatsappModal" 
     onclick="setCurrentPhoneNumber('{{this.whatsapp}}', '{{this.name}}', '{{this.course}}')">
     <i class="fab fa-whatsapp"></i>
  </a>
</td>


        <td>
            <button class="btn-sm btn-primary" onclick="redirectToSEForm(this)">SE FORM</button>
        </td>
        
   <td>
  <input type="date" class="form-control senumber-input" value="{{this.senumber}}" />
</td>
    <td>
      <button class="btn-sm btn-success save-senumber-btn" data-id="{{this._id}}">Save</button>
    </td>
     <td>
            <button class="btn-sm btn-primary" onclick="redirectToSEFormClient(this)">SE FORM Client</button>
        </td>
    </tr>
    {{/each}}
</tbody>
                    </table>
                </div>
            </div>
       
    <div class="alert alert-warning my-3" role="alert" id="alertMessage">
        Please save each stage of the lead form as you progress.
    </div>
</div>





<script>
 document.getElementById('hideColumnsBtn').addEventListener('click', function () {
    const columnsToKeep = ['Time Stamp', 'State', 'Specialization', 'Name', 'Current Salary','Action','Follow Up', 'Course', 'WhatsApp', 'Mobile', 'Experience', 'Main Stage', 'Lead Stage', 'Lead Sub-Stage', 'Lead Status', 'Send', 'SE'];
    const isMinimized = this.classList.toggle('minimized');

    // Iterate over all table headers
    document.querySelectorAll('#dataTable thead th').forEach((th, index) => {
        const headerText = th.textContent.trim();

        if (isMinimized) {
            // If header text is not in the columnsToKeep array, hide the corresponding th and td
            if (!columnsToKeep.includes(headerText)) {
                th.style.display = 'none';

                // Hide corresponding td in each row
                document.querySelectorAll(`#dataTable tbody tr td:nth-child(${index + 1})`).forEach(td => {
                    td.style.display = 'none';
                });
            }
        } else {
            // Show all columns when unminimized
            th.style.display = '';
            document.querySelectorAll(`#dataTable tbody tr td:nth-child(${index + 1})`).forEach(td => {
                td.style.display = '';
            });
        }
    });

    // Update button text based on current state
    this.textContent = isMinimized ? 'Show All Fields' : 'Hide Some Fields';
});


</script>
<style>
   .fab {
    font-size: 25px !important;
    font-weight: bolder;
    color: #25D366; /* WhatsApp's official green color */
}

    .card {
        background-color: #f8f9fa;
        border: 2px solid #007bff;
        border-radius: 10px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: pointer;
    }
    .card:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    }
    .card-title {
        font-size: 1rem;
        color: #007bff;
    }
    .card-text {
        font-size: 0.8rem;
        color: #333;
    }
    h6{
        font-size: 15px !important;
    }
</style>

<!-- Modal -->
<div class="modal fade" id="whatsappModal" tabindex="-1" aria-labelledby="whatsappModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h6 class="modal-title" id="whatsappModalLabel">Select a Draft to Send</h6>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row">
          <!-- Card 1 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('RNR')">
              <div class="card-body">
                <h5 class="card-title">Draft RNR</h5>
                <p class="card-text">Greetings! This is {{userName}} from Indian Edu Hub. We missed our call regarding the {{course}} course. Let’s reschedule!</p>
              </div>
            </div>
          </div>
          <!-- Card 2 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('just_interest')">
              <div class="card-body">
                <h5 class="card-title">Draft Just Interest</h5>
                <p class="card-text">I understand you might have reservations, {{currentLeadName}}. Let’s discuss how we can better assist you.</p>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <!-- Card 3 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('QL')">
              <div class="card-body">
                <h5 class="card-title">Draft QL</h5>
                <p class="card-text">Excited to discuss your interest in our service, {{currentLeadName}}. Let’s set up a follow-up meeting!</p>
              </div>
            </div>
          </div>
          <!-- Card 4 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('direct_university')">
              <div class="card-body">
                <h5 class="card-title">Draft Direct University</h5>
                <p class="card-text">Thank you for opting out, {{currentLeadName}}. If you need support, feel free to reach out.</p>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <!-- Card 5 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('PQL')">
              <div class="card-body">
                <h5 class="card-title">Draft PQL</h5>
                <p class="card-text">Great talking with you, {{currentLeadName}}! It sounds like our Premium Membership plan is a perfect match for your needs. Let’s set up a follow-up meeting to explore how we can help you achieve your goals.</p>
              </div>
            </div>
          </div>
          <!-- Card 6 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('HQL')">
              <div class="card-body">
                <h5 class="card-title">Draft HQL</h5>
                <p class="card-text">Thank you for choosing our service, {{currentLeadName}}! We’re thrilled to have you on board and are excited to start working together. If you have any questions or need assistance, please don’t hesitate to reach out.</p>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <!-- Card 7 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('QL_NR')">
              <div class="card-body">
                <h5 class="card-title">Draft QL - NR</h5>
                <p class="card-text">I noticed we missed a few calls, {{currentLeadName}}, but I’m excited about your continued interest in our Premium Membership plan. Could you let me know your availability for a call?</p>
              </div>
            </div>
          </div>
          <!-- Card 8 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('PQL_NR')">
              <div class="card-body">
                <h5 class="card-title">Draft PQL - NR</h5>
                <p class="card-text">I noticed we missed a few calls, {{currentLeadName}}, but I’m very enthusiastic about the potential for us to work together. Your interest in our Premium Membership plan is important to us. Could you let me know your preferred time for a call?</p>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <!-- Card 9 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('Busy')">
              <div class="card-body">
                <h5 class="card-title">Draft Busy</h5>
                <p class="card-text">I understand you’re currently on another call, {{currentLeadName}}. Just wanted to let you know that I’m here and ready to connect whenever it’s convenient for you. Please let me know a suitable time for us to speak.</p>
              </div>
            </div>
          </div>
          <!-- Card 10 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('UQL')">
              <div class="card-body">
                <h5 class="card-title">Draft UQL</h5>
                <p class="card-text">Thank you for considering our services, {{currentLeadName}}. After reviewing your needs, it seems our offerings might not be the best fit at this time. If you have any referrals for online UG/PG programs, please let us know.</p>
              </div>
            </div>
          </div>
        </div>
        <div class="row">
          <!-- Card 11 -->
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('Special_offer')">
              <div class="card-body">
                <h5 class="card-title">Draft Special Offer</h5>
                <p class="card-text">We’re offering our premium membership for free to the first 500 sign-ups. Don’t miss out!</p>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card mb-3" onclick="sendDraftMessage('new_lead')">
              <div class="card-body">
                <h5 class="card-title">Draft Not Contacted</h5>
                <p class="card-text">Hi ${currentLeadName},\n\nI’m {{userName}} from Indian Edu Hub. We help students find the perfect university based on their needs and goals.\n\nI noticed you’re available [mention their available time] . Would you like to chat then to see how we can assist you? Let me know!\n\nBest,\n{{userName}}</p>
              </div>
            </div>
          </div>
          <!-- Placeholder or Empty Space -->
          <div class="col-md-6"></div>
        </div>
      </div>
    </div>
  </div>
</div>


<script>
function sendDraftMessage(draftKey, name) {
    const draftMessages = {
         RNR: `Hello ${currentLeadName},\n\nGreetings! This is {{userName}} from Indian Edu Hub.\n\nI noticed we missed our scheduled call today regarding the ${currentCourse} course you inquired about. If you’re still interested, I’d be happy to reschedule at a time that works better for you.\n\nPlease let me know your availability, or suggest another time that suits you.\n\nLooking forward to hearing from you!\n\nBest regards,\n{{userName}}`,
        just_interest: `Hello ${currentLeadName},\n\nI hope you’re doing well.\n\nThank you for your time during our initial call. I understand you might have some reservations or limited interest at the moment. I’d love to learn more about your specific needs and how we might better assist you.\n\nIf you have any questions or need more information about our services, please let me know. I’m here to help and can provide additional details or arrange another conversation at your convenience.\n\nLooking forward to hearing from you!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        QL: `Hello ${currentLeadName},\n\nThank you for the engaging conversation earlier. I’m excited to hear about your interest in our (specific service or product). To move forward, we can schedule a follow-up meeting to discuss the next steps and tailor our offerings to meet your needs.\n\nPlease let me know your next time availability, or if you prefer, I can suggest a few times that work on my end.\n\nLooking forward to continuing our discussion!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        direct_university: `Hello ${currentLeadName},\n\nI hope you’re well.\n\nThank you for our recent conversation. I understand you’re opting to handle university selection without our premium plan service. If you have any questions or need support, feel free to reach out. We're here to help.\n\nBest of luck with your higher studies!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        PQL: `Hello ${currentLeadName},\n\nGreat talking with you! It sounds like our Premium Membership plan is a perfect match for your needs. Let’s set up a follow-up meeting to explore how we can help you achieve your goals.\n\nWhen are you available? I’m flexible and happy to work around your schedule.\n\nLooking forward to it!\n\nBest,\n{{userName}}\nIndian Edu Hub`,
        HQL: `Hello ${currentLeadName},\n\nThank you for choosing our service! We’re thrilled to have you on board and are excited to start working together.\n\nIf you have any questions or need assistance as we get started, please don’t hesitate to reach out. We’re here to ensure everything goes smoothly and meets your expectations.\n\nLooking forward to a successful collaboration!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        'QL-NR': `Hello ${currentLeadName},\n\nI hope you’re doing well!\n\nI noticed we missed a few calls, but I’m excited about your continued interest in our Premium Membership plan. I’d love to discuss how we can move forward.\n\nCould you let me know your availability for a call (00:00)? \n\nLooking forward to connecting soon!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        'PQL-NR': `Hello ${currentLeadName},\n\nI hope you’re well!\n\nI noticed we missed a few calls, but I’m very enthusiastic about the potential for us to work together. Your interest in our Premium Membership plan is important to us, and I want to ensure we address all your needs.\n\nCould you let me know your preferred time for a call? (Please mention the Time & Date). I’m flexible and happy to accommodate your schedule.\n\nLooking forward to your response and to moving forward together!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        Busy: `Hello ${currentLeadName},\n\nI understand you’re currently on another call. Just wanted to let you know that I’m here and ready to connect whenever it’s convenient for you.\n\nPlease let me know a suitable time for us to speak, or if you prefer, I can follow up at a later time that works better for you.\n\nLooking forward to our conversation!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        UQL: `Hello ${currentLeadName},\n\nThank you for considering our services. After reviewing your needs, it seems our offerings might not be the best fit at this time.\n\nIf you have any referrals for online UG/PG programs or know someone who might benefit from our services, please let us know.\n\nBest of luck with your search!\n\nBest regards,\n{{userName}}\nIndian Edu Hub`,
        Special_offer: `Hello ${currentLeadName},\n\nExciting news!\n\nWe’re offering our premium membership plan, worth ₹7,0000, for free to the first 500 sign-ups.\n\nThis is a fantastic chance to access top-tier benefits at no cost. It will help you grow & succeed.\n\nInterested or know someone who might be? Let us know to secure your spot!\n\nBest regards,\n{{userName}}\nIndian Edu Hub\nIndianeduhub.in`,
        new_lead: `Hi ${currentLeadName},\n\nI’m {{userName}} from Indian Edu Hub. We help students find the perfect university based on their needs and goals.\n\nI noticed you’re available [mention their available time] . Would you like to chat then to see how we can assist you? Let me know!\n\nBest,\n{{userName}}`
    };

   const message = draftMessages[draftKey];
    if (!message) {
        console.error('Draft not found');
        return;
    }

    const whatsappLink = `https://wa.me/${currentPhoneNumber}?text=${encodeURIComponent(message)}`;
    window.open(whatsappLink, '_blank');
}

let currentPhoneNumber = '';
let currentLeadName = '';
let currentCourse = ''; // Added for handling course

function setCurrentPhoneNumber(phoneNumber, leadName, course) {
    currentPhoneNumber = phoneNumber;
    currentLeadName = leadName;
    currentCourse = course; // Set course here
}

</script>



<!-- Modal -->
<div class="modal fade" id="leadStatusModal" tabindex="-1" aria-labelledby="leadStatusModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h6 class="modal-title" id="leadStatusModalLabel">Lead Status Timeline</h6>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="timeline-container"></div>
      </div>
    </div>
  </div>
</div>



<style>
      /* Modal and header styling */
  .modal-content {
    border-radius: 15px;
    background: linear-gradient(135deg, #f5f7fa, #c3cfe2); /* Gradient background */
    color: #333; /* Darker text for contrast */
  }
  
  .modal-header {
    border-bottom: 2px solid #007bff; /* Blue bottom border */
    background: #f5f7fa; /* Lighter background for header */
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    padding: 15px;
  }

  .modal-title {
    font-size: 24px;
    font-weight: bold;
  }
/* Status category section */
.status-category-section {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 20px; /* Space between category and timeline items */
    border-bottom: 2px solid #007bff; /* Optional: Add a border to separate categories */
    padding-bottom: 10px; /* Space between category text and the border */
}

/* Timeline container */
.timeline-container {
    position: relative;
    padding: 20px;
    border-left: 3px solid #007bff; /* Thicker vertical line for timeline */
    overflow-x: hidden;
}

/* Timeline items */
.timeline-item {
    position: relative;
    padding: 15px 0;
    margin-left: 80px; /* Increased space for date and line */
    display: flex;
    align-items: flex-start;
    flex-direction: row;
}

/* Date styling */
.timeline-item .timeline-date {
    position: absolute;
    left: -100px; /* Adjusted to fit within modal */
    top: 0;
    width: 80px;
    text-align: center;
    font-size: 14px;
    color: #232f65; /* Change this to your desired color */
    font-weight: bold;
}

/* Item content styling */
.timeline-item-content {
    background: #f9f9f9;
    border: 2px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-left: 30px; /* Increased space between date and content */
    position: relative;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    width: calc(100% - 110px); /* Adjust width to fit within modal */
    max-width: 600px; /* Increased max-width for readability */
    border-left: 3px solid #007bff; /* Thicker vertical line after the date */
}

/* Vertical line and circle */
.timeline-item::before {
    content: '';
    position: absolute;
    left: -10px; /* Adjust to ensure circle is visible */
    top: 15px;
    width: 12px;
    height: 12px;
    background: #007bff;
    border-radius: 50%;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .modal-content {
        font-size: 10px; /* Font size for mobile screens */
    }

    .timeline-item {
        margin-left: 30px; /* Adjust for smaller screens */
    }

    .timeline-item-content {
        width: calc(100% - 40px); /* Adjust width for smaller screens */
        padding: 10px;
    }

    .timeline-item .timeline-date {
        left: -50px; /* Adjust date position for mobile */
        width: 50px;
    }

    .timeline-item::before {
        left: -6px; /* Adjust circle position for mobile */
    }
}
.small-font {
    font-size: smaller; /* or use any specific size like 10px */
}

</style>


<script>
async function showLeadStatus(button) {
    const row = button.closest('tr');
    const leadStatusContent = row.querySelector('.leadStatusContent').textContent.trim();

    if (!leadStatusContent) {
        alert('No lead status available.');
        return;
    }

    const timelineContainer = document.querySelector('.timeline-container');
    timelineContainer.innerHTML = '';

    try {
        const leadStatus = JSON.parse(leadStatusContent);

        // Function to format time in IST
        function formatTimeInIST(dateString) {
            const date = new Date(dateString);
            date.setHours(date.getHours() + 5);
            date.setMinutes(date.getMinutes() + 30);
            return date.toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' });
        }

        // Iterate through each stage in leadStatus
        Object.keys(leadStatus).forEach(statusCategory => {
            const stages = leadStatus[statusCategory];

            // Create and append a section for the statusCategory
            const categorySection = document.createElement('div');
            categorySection.className = 'status-category-section';
            categorySection.innerHTML = `<h5>${statusCategory}</h5>`;
            timelineContainer.appendChild(categorySection);

            Object.keys(stages).forEach(stage => {
                const stageDetails = stages[stage];

                if (Array.isArray(stageDetails)) {
                    stageDetails.forEach((stageDetail, index) => {
                        const timelineItem = document.createElement('div');
                        timelineItem.className = `timeline-item ${index % 2 === 0 ? 'left' : 'right'}`;

                        // Format date and time separately
                        const date = stageDetail.date ? new Date(stageDetail.date).toLocaleDateString() : 'N/A';
                        const time = stageDetail.date ? formatTimeInIST(stageDetail.date) : '';

                        // Create date element with time in a smaller font
                        const dateElement = document.createElement('div');
                        dateElement.className = 'timeline-date';
                 dateElement.innerHTML = `<span class="small-font">${stageDetail.date ? new Date(stageDetail.date).toLocaleString() : 'N/A'}</span>`;



                        // Create content element
                        const contentElement = document.createElement('div');
                        contentElement.className = 'timeline-item-content';
                        contentElement.innerHTML = `
                            <h6>${stage}</h6>
                            <p>Status: ${stageDetail.status || 'N/A'}</p>
                            <p>Sub-Stage: ${stageDetail.subStage || 'N/A'}</p>
                            ${stageDetail.followUp ? `<p>Follow-Up Date: ${new Date(stageDetail.followUp.date).toLocaleDateString()} ${stageDetail.followUp.time}</p>` : ''}
                        `;

                        timelineItem.appendChild(dateElement);
                        timelineItem.appendChild(contentElement);
                        timelineContainer.appendChild(timelineItem);
                    });
                } else {
                    console.error(`Invalid data format for stage "${stage}". Expected an array, but got:`, stageDetails);
                }
            });
        });
    } catch (error) {
        console.error('Error parsing lead status:', error);
    }
}

// Attach event listener to modal show event
document.addEventListener('DOMContentLoaded', function () {
    const leadStatusModal = document.getElementById('leadStatusModal');

    leadStatusModal.addEventListener('show.bs.modal', function (event) {
        const button = event.relatedTarget; // Button that triggered the modal
        showLeadStatus(button);
    });
});


</script>

<style>
    
</style>
<script>

function redirectToSEForm(button) {
    const row = button.closest('tr');
    const name = row.querySelector('td:nth-child(8)').textContent.trim();
    const email = row.querySelector('td:nth-child(20)').textContent.trim();
    const whatsapp = row.querySelector('td:nth-child(9)').textContent.trim();
    const course = row.querySelector('td:nth-child(17)').textContent.trim();
    const specialization = row.querySelector('td:nth-child(28)').textContent.trim();
    const city = row.querySelector('td:nth-child(16)').textContent.trim();
    const state = row.querySelector('td:nth-child(7)').textContent.trim();
    const budget = row.querySelector('td:nth-child(15)').textContent.trim();
    const referredBy = row.querySelector('td:nth-child(3)').textContent.trim(); // ReferredBy

    // Construct URL with query parameters
    const url = new URL('/se-form', window.location.origin);
    url.searchParams.append('name', encodeURIComponent(name));
    url.searchParams.append('email', encodeURIComponent(email));
    url.searchParams.append('whatsapp', encodeURIComponent(whatsapp));
    url.searchParams.append('course', encodeURIComponent(course));
    url.searchParams.append('specialization', encodeURIComponent(specialization));
    url.searchParams.append('city', encodeURIComponent(city)); // Add city
    url.searchParams.append('state', encodeURIComponent(state)); // Add state
    url.searchParams.append('budget', encodeURIComponent(budget));
    url.searchParams.append('referredBy', encodeURIComponent(referredBy)); // Add ReferredBy

    // Redirect to SE Form page
    window.location.href = url.toString();
}


function redirectToSEFormClient(button) {
    const row = button.closest('tr');

    // Fetch values from the corresponding table columns
    const name = row.querySelector('td:nth-child(8)').textContent.trim();
    const email = row.querySelector('td:nth-child(20)').textContent.trim();
    const whatsapp = row.querySelector('td:nth-child(9)').textContent.trim();
    const course = row.querySelector('td:nth-child(17)').textContent.trim();
    const specialization = row.querySelector('td:nth-child(28)').textContent.trim();
    const city = row.querySelector('td:nth-child(16)').textContent.trim();
    const state = row.querySelector('td:nth-child(7)').textContent.trim();
    const budget = row.querySelector('td:nth-child(15)').textContent.trim();
    const referredBy = row.querySelector('td:nth-child(3)').textContent.trim(); // ReferredBy

    // Fetch the SE number (now a date) from the input field
    const senumber = row.querySelector('.senumber-input').value.trim();

    // Construct URL with query parameters
    const url = new URL('/se-form-client', window.location.origin);
    url.searchParams.append('name', encodeURIComponent(name));
    url.searchParams.append('email', encodeURIComponent(email));
    url.searchParams.append('whatsapp', encodeURIComponent(whatsapp));
    url.searchParams.append('course', encodeURIComponent(course));
    url.searchParams.append('specialization', encodeURIComponent(specialization));
    url.searchParams.append('city', encodeURIComponent(city)); // Add city
    url.searchParams.append('state', encodeURIComponent(state)); // Add state
    url.searchParams.append('budget', encodeURIComponent(budget));
    url.searchParams.append('referredBy', encodeURIComponent(referredBy)); // Add ReferredBy
    url.searchParams.append('senumber', encodeURIComponent(senumber)); // Pass SE number (now a date)

    // Redirect to SE Form page
    window.location.href = url.toString();
}


</script>
<script>document.addEventListener('DOMContentLoaded', () => {
    // Event listener for the follow-up date input
    document.querySelectorAll('.follow-up-date').forEach(input => {
        input.addEventListener('change', function () {
            if (this.value) {
                const followUpTime = this.closest('.follow-up-container').querySelector('.follow-up-time');
                followUpTime.focus();
                Swal.fire({
                    icon: 'info',
                    title: 'Select Time',
                    text: 'Please select a follow-up time.',
                });
            }
        });
    });

    // Event listener for the follow-up time input
    document.querySelectorAll('.follow-up-time').forEach(input => {
        input.addEventListener('change', function () {
            if (this.value) {
                const followUpDescription = this.closest('.follow-up-container').querySelector('.follow-up-description');
                followUpDescription.focus();
                Swal.fire({
                    icon: 'info',
                    title: 'Enter Description',
                    text: 'Please enter a follow-up description.',
                });
            }
        });
    });
});
</script>
<script>
async function updateStageOptions(mainStageSelect) {
    const mainStage = mainStageSelect.value;
    const row = mainStageSelect.closest('tr');
    const stageSelect = row.querySelector('.lead-stage-select');
    const subStageSelect = row.querySelector('.sub-stage-select');

    // Clear the stage and sub-stage dropdowns if no main stage is selected
    if (!mainStage) {
        stageSelect.innerHTML = '<option value="">Select Stage</option>';
        subStageSelect.innerHTML = '<option value="">Select Sub-Stage</option>';
        return;
    }

    try {
        const response = await fetch('/get-stages', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ mainStage })
        });

        const result = await response.json();

        if (result.success) {
            const stages = result.stages;
            stageSelect.innerHTML = '<option value="">Select Stage</option>';
            subStageSelect.innerHTML = '<option value="">Select Sub-Stage</option>';

            stages.forEach(stage => {
                const option = document.createElement('option');
                option.value = stage;
                option.textContent = stage;
                stageSelect.appendChild(option);
            });
        } else {
            console.error('Failed to fetch stages:', result.message);
            stageSelect.innerHTML = '<option value="">No Stages Available</option>';
        }
    } catch (error) {
        console.error('Error fetching stages:', error);
        stageSelect.innerHTML = '<option value="">Error Loading Stages</option>';
    }
}

async function updateSubStageOptions(stageSelect) {
    const stage = stageSelect.value;
    const row = stageSelect.closest('tr');
    const subStageSelect = row.querySelector('.sub-stage-select');
    const mainStage = row.querySelector('.main-stage-select').value;

    if (!stage || !mainStage) {
        subStageSelect.innerHTML = '<option value="">Select Sub-Stage</option>';
        return;
    }

    try {
        const response = await fetch('/get-sub-stages', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ stage, mainStage })
        });

        const result = await response.json();

        if (result.success) {
            const subStages = result.subStages;
            subStageSelect.innerHTML = '<option value="">Select Sub-Stage</option>';

            subStages.forEach(subStage => {
                const option = document.createElement('option');
                option.value = subStage.name;
                option.textContent = subStage.name;
                option.dataset.mandatory = subStage.mandatory;
                subStageSelect.appendChild(option);
            });
        } else {
            console.error('Failed to fetch sub-stages:', result.message);
            subStageSelect.innerHTML = '<option value="">No Sub-Stages Available</option>';
        }
    } catch (error) {
        console.error('Error fetching sub-stages:', error);
        subStageSelect.innerHTML = '<option value="">Error Loading Sub-Stages</option>';
    }
}


async function saveLeadStatus(button) {
    const row = button.closest('tr');
    const id = row.querySelector('td[hidden]').textContent.trim();
    const mainStageSelect = row.querySelector('.main-stage-select');
    const leadStageSelect = row.querySelector('.lead-stage-select');
    const subStageSelect = row.querySelector('.sub-stage-select');
    const leadStatusTextarea = row.querySelector('.lead-status-textarea');
    const mainStage = mainStageSelect.value;
    const leadStage = leadStageSelect.value;
    const subStage = subStageSelect.value;
    const leadStatus = leadStatusTextarea.value.trim();

    // Check if the main stage, lead stage, lead status, and sub-stage fields are filled
    if (!mainStage || !leadStage || !leadStatus || !subStage) {
        Swal.fire({
            icon: 'warning',
            title: 'Missing Required Fields',
            text: 'Please fill out the main stage, lead stage, sub-stage, and lead status fields before saving.',
        });
        return;
    }

    // Check if the sub-stage is required and if it is filled
    let isMandatory = false;
    try {
        const response = await fetch('/get-sub-stage-mandatory', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ stage: leadStage, subStage })
        });

        const result = await response.json();
        if (result.success) {
            isMandatory = result.isMandatory;
            console.log(`Sub-Stage "${subStage}" is mandatory: ${isMandatory}`);
        } else {
            console.error('Failed to fetch sub-stage mandatory status:', result.message);
            return;
        }
    } catch (error) {
        console.error('Error fetching sub-stage mandatory status:', error);
        return;
    }

    if (isMandatory && !subStage) {
        Swal.fire({
            icon: 'warning',
            title: 'Mandatory Field Missing',
            text: 'Please select a mandatory sub-stage before saving.',
        });
        return;
    }

    // Check if follow-up fields are required and filled
    const followUpContainer = row.querySelector('.follow-up-container');
    const followUpDate = row.querySelector('.follow-up-date')?.value || null;
    const followUpTime = row.querySelector('.follow-up-time')?.value || null;

    if (isMandatory && followUpContainer && (!followUpDate || !followUpTime)) {
        Swal.fire({
            icon: 'warning',
            title: 'Follow-Up Missing',
            text: 'Please fill in both the follow-up date and time before saving.',
        });
        return;
    }

    // Get the current date and time in IST
    const now = new Date();
    const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
    const istDate = new Date(now.getTime() + istOffset);
    const dateString = istDate.toISOString().slice(0, 19).replace('T', ' '); // Convert to 'YYYY-MM-DD HH:MM:SS' format

    const statusObj = {
        status: leadStatus,
        subStage,
        date: dateString, // Store the IST formatted date and time
        followUp: followUpDate || followUpTime ? { date: followUpDate, time: followUpTime } : null
    };

    const leadStatusUpdate = {
        mainStage,
        leadStage,
        statusObj
    };

    try {
        const response = await fetch('/update-lead-status', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                id,
                leadStatusUpdate
            })
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Saved',
                text: 'Lead status has been updated successfully!',
            }).then(() => {
                location.reload();  // Reload the page after success
            });

            leadStatusTextarea.value = '';
            subStageSelect.value = '';
            row.querySelector('.follow-up-date').value = '';
            row.querySelector('.follow-up-time').value = '';

        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'An error occurred while updating the lead status.',
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the lead status.',
        });
    }
}


</script>

    <!-- Add necessary JS files -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>




<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<script>
$(document).ready(function() {
    // Initialize DataTable
    const table = $('#dataTable').DataTable({
        pageLength: 100,
        lengthMenu: [[100, 25, 10, -1], [100, 25, 10, "All"]],
        order: [[2, 'desc']] // Adjust column index if needed
    });


  // Helper function to format dates as YYYY-MM-DD
        function formatDate(date) {
            let month = '' + (date.getMonth() + 1);
            let day = '' + date.getDate();
            const year = date.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [year, month, day].join('-');
        }

        // Filter rows based on date selection
        $('#dateFilter').on('change', function() {
            const filterValue = $(this).val();
            const today = new Date();
            let startDate, endDate;

            switch (filterValue) {
                case 'today':
                    startDate = formatDate(new Date(today.setHours(0, 0, 0, 0)));
                    endDate = formatDate(new Date(today.setHours(23, 59, 59, 999)));
                    break;
                case 'yesterday':
                    const yesterday = new Date(today);
                    yesterday.setDate(today.getDate() - 1);
                    startDate = formatDate(new Date(yesterday.setHours(0, 0, 0, 0)));
                    endDate = formatDate(new Date(yesterday.setHours(23, 59, 59, 999)));
                    break;
                case 'this-week':
                    const firstDayOfWeek = new Date(today.setDate(today.getDate() - today.getDay()));
                    startDate = formatDate(new Date(firstDayOfWeek.setHours(0, 0, 0, 0)));
                    endDate = formatDate(new Date(firstDayOfWeek.setDate(firstDayOfWeek.getDate() + 6)));
                    break;
                case 'last-month':
                    const firstDayLastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);
                    startDate = formatDate(new Date(firstDayLastMonth.setHours(0, 0, 0, 0)));
                    const lastDayLastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
                    endDate = formatDate(new Date(lastDayLastMonth.setHours(23, 59, 59, 999)));
                    break;
                default:
                    table.search('').draw(); // Show all rows if no filter is selected
                    return;
            }

            // Filter table rows based on the date range
            table.rows().every(function() {
                const rowDate = $(this.node()).data('assign-date');
                if (rowDate >= startDate && rowDate <= endDate) {
                    $(this.node()).show();
                } else {
                    $(this.node()).hide();
                }
            });
        });
    // Initialize Flatpickr for date ranges and single date
    flatpickr("#filterDateRange", {
        mode: "range",
        dateFormat: "Y-m-d"
    });

    flatpickr("#filterSingleDate", {
        mode: "single",
        dateFormat: "Y-m-d"
    });

    // Filter function for stage and substage
    function filterTable() {
        const stageFilterValue = $('#stageFilter').val().toLowerCase();
        const substageFilterValue = $('#substageFilter').val().toLowerCase();
        const courseFilterValue = $('#filterCourse').val().toLowerCase(); // New course filter value
        const rows = table.rows().nodes();

        rows.each(function(row) {
            const leadStatusCell = $(row).find('.leadStatusContent');
            let stageMatch = false;
            let substageMatch = false;
            let courseMatch = false; // New course match variable

            if (leadStatusCell.length) {
                try {
                    const leadStatus = JSON.parse(leadStatusCell.text());

                    Object.keys(leadStatus).forEach(statusCategory => {
                        const stages = leadStatus[statusCategory];

                        Object.keys(stages).forEach(stage => {
                            const stageDetails = stages[stage];

                            if (Array.isArray(stageDetails)) {
                                stageDetails.forEach(stageDetail => {
                                    if (stage.toLowerCase() === stageFilterValue) {
                                        stageMatch = true;
                                    }
                                    if (stageDetail.subStage && stageDetail.subStage.toLowerCase() === substageFilterValue) {
                                        substageMatch = true;
                                    }
                                });
                            }
                        });
                    });

                    // Check if the course matches
                    const rowCourse = $(row).find('td').eq(14).text().toLowerCase(); // Assuming course is in the 15th column
                    if (courseFilterValue === '' || rowCourse.includes(courseFilterValue)) {
                        courseMatch = true;
                    }

                    if ((stageFilterValue === '' || stageMatch) && (substageFilterValue === '' || substageMatch) && courseMatch) {
                        $(row).show();
                    } else {
                        $(row).hide();
                    }
                } catch (error) {
                    console.error('Error parsing lead status:', error);
                }
            }
        });
    }

    // Apply Filters Button Event Listener
    $('#applyFiltersBtn').on('click', function() {
        const state = $('#filterState').val().toLowerCase();
        const city = $('#filterCity').val().toLowerCase();
        const dateRange = $('#filterDateRange').val();
        const singleDateValue = $('#filterSingleDate').val();
        const singleDate = singleDateValue ? new Date(singleDateValue) : null;
        const course = $('#filterCourse').val().toLowerCase(); // New course filter

        let startDate = null, endDate = null;

        if (dateRange) {
            const dates = dateRange.split(' to ');
            startDate = new Date(dates[0]);
            endDate = dates[1] ? new Date(dates[1]) : startDate;

            startDate.setHours(0, 0, 0, 0);
            endDate.setHours(23, 59, 59, 999);
        }

        $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
            const rowState = data[6].toLowerCase();
            const rowCity = data[15].toLowerCase();
            const rowCourse = data[16].toLowerCase(); // Assuming course is in the 15th column
            const rowDate = new Date(data[4]);

            rowDate.setHours(0, 0, 0, 0);

            const isStateMatch = state ? rowState.includes(state) : true;
            const isCityMatch = city ? rowCity.includes(city) : true;
            const isCourseMatch = course ? rowCourse.includes(course) : true;

            let isDateMatch = true;

            if (singleDate) {
                isDateMatch = rowDate.getTime() === singleDate.getTime();
            } else if (startDate && endDate) {
                isDateMatch = rowDate.getTime() >= startDate.getTime() && rowDate.getTime() <= endDate.getTime();
            }

            return isStateMatch && isCityMatch && isDateMatch && isCourseMatch;
        });

        filterTable(); // Apply stage, substage, and course filters
        table.draw(); // Redraw the table to reflect changes
    });

  $('#clearFiltersBtn').on('click', function() {
    // Clear all filter inputs
    $('#filterState').val('');
    $('#filterCity').val('');
    $('#filterDateRange').val('');
    $('#filterSingleDate').val('');
    $('#stageFilter').val('');
    $('#substageFilter').val('');
    $('#courseFilter').val(''); // Add this line to clear the course filter

    // Clear DataTable filters
    $.fn.dataTable.ext.search.pop();
    table.search('').columns().search('').draw();

    // Clear custom filters
    filterTable(); // Clear stage and substage filters
    table.draw(); // Redraw the table to reflect changes
});

});

</script>

<script>
    const tableWrapper = document.querySelector('.table-wrapper');
    const stickyHeaders = document.querySelectorAll('.sticky'); // Include third and fourth sticky headers

    tableWrapper.addEventListener('scroll', function() {
        if (tableWrapper.scrollLeft > 0) {
            stickyHeaders.forEach(header => {
                header.style.boxShadow = '5px 0 10px rgba(0, 0, 0, 0.5)'; // Right-side light black shadow
                header.style.zIndex = '4'; // Ensure sticky header stays above content
            });
        } else {
            stickyHeaders.forEach(header => {
                header.style.boxShadow = 'none'; // Remove shadow when not scrolling
                header.style.zIndex = '3'; // Restore original z-index
            });
        }
    });
</script>




<script>
  // Save the new senumber value
  function savemblnumbr(button) {
    const row = button.closest('tr');  // Get the current row
    const id = $(button).data('id');   // Get the ID from the data attribute
    const senumber = row.querySelector('.senumber-input').value;  // Get the value of the senumber

    // AJAX request to update the senumber
    $.ajax({
      url: '/update-senumber',  // Backend route
      method: 'POST',
      contentType: 'application/json',
      data: JSON.stringify({ id: id, senumber: senumber }),  // Send the id and new senumber value
      success: function(response) {
        if (response.success) {
          alert("SE Number updated successfully!");
        } else {
          alert("Failed to update SE Number.");
        }
      },
      error: function() {
        alert("Error in the request.");
      }
    });
  }

  // Attach the event listener to the save button
  $(document).on('click', '.save-senumber-btn', function() {
    savemblnumbr(this);
  });
</script>

  <!-- Additional JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="lib/chart/chart.min.js"></script>
  <script src="lib/easing/easing.min.js"></script>
  <script src="lib/waypoints/waypoints.min.js"></script>
  <script src="lib/owlcarousel/owl.carousel.min.js"></script>
  <script src="lib/tempusdominus/js/moment.min.js"></script>
  <script src="lib/tempusdominus/js/moment-timezone.min.js"></script>
  <script src="lib/tempusdominus/js/tempusdominus-bootstrap-4.min.js"></script>

  <!-- Template Javascript -->
  <script src="js/main.js"></script>
</body>
</html>