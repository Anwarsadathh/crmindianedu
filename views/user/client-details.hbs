<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>Leads</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <meta content="" name="keywords">
    <meta content="" name="description">

    <!-- Favicon -->
    <link href="img/favicon.ico" rel="icon">

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Heebo:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Icon Font Stylesheet -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css" rel="stylesheet">
 <!-- Add necessary meta tags and links to CSS/JS files -->
<!-- jQuery -->
<script src="https://code.jquery.com/jquery-3.7.1.js"></script>

<!-- DataTables CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/2.0.3/css/dataTables.dataTables.css">

<!-- DataTables JavaScript -->
<script src="https://cdn.datatables.net/2.0.3/js/dataTables.js"></script>

<!-- DataTables Buttons CSS -->
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/buttons/3.0.1/css/buttons.dataTables.css">

<!-- DataTables Buttons JavaScript -->
<script src="https://cdn.datatables.net/buttons/3.0.1/js/dataTables.buttons.js"></script>
<script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.dataTables.js"></script>

<!-- JSZip -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>

<!-- pdfmake -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js"></script>

<!-- DataTables Buttons HTML5 and Print JavaScript -->
<script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.html5.min.js"></script>
<script src="https://cdn.datatables.net/buttons/3.0.1/js/buttons.print.min.js"></script>

<!-- DataTables Select JavaScript -->
<script src="https://cdn.datatables.net/select/2.0.0/js/dataTables.select.js"></script>
<script src="https://cdn.datatables.net/select/2.0.0/js/select.dataTables.js"></script>

    <!-- Libraries Stylesheet -->
    <link href="lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="lib/tempusdominus/css/tempusdominus-bootstrap-4.min.css" rel="stylesheet" />

    <!-- Customized Bootstrap Stylesheet -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Template Stylesheet -->
    <link href="css/style.css" rel="stylesheet">
 <style>
    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300&display=swap');

.search{
  
  top:6px;
  left:9px;
}
     .date-input {
    width: 100% !important;
    padding: 6px!important;
    font-size: 9px !important;
    border-radius: 4px !important;
    border: 1px solid #ced4da !important;
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075) !important;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out !important;
}

.date-input:focus {
    border-color: #80bdff !important;
    outline: 0 !important;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
}

.form-control{
    
    border:none;
    padding-left:32px;
}
.tt {
    margin-top: 9px;
    border-radius: 9px;

}
.container{
    background-color: #f2f9f6 !important; /* Very pale mint green */

}
.table-responsive{
    padding: 9px;
}
.form-control:focus{
    
    border:none;
    box-shadow:none;
}

.green{
    
    color:green;
}
/* Button styles */
.btn-status {
    font-size: 9px; /* Smaller font size for buttons */
    padding: 4px 8px; /* Smaller padding for buttons */
    transition: background-color 0.3s ease;
}

.btn-not-paid {
    background-color: #e8172c; /* Red */
    color: #fff;
}

.btn-paid {
    background-color: #28a745; /* Green */
    color: #fff;
}

.btn-not-approved {
    background-color: #ffc107; /* Yellow */
    color: #000;
}

.btn-approved {
    background-color: #17a2b8; /* Teal */
    color: #fff;
}

.btn-not-done {
    background-color: #ffc107; /* Yellow */
    color: #000;
}

.btn-done {
    background-color: #28a745; /* Green */
    color: #fff;
}

.btn-status.active-paid {
    background-color: #28a745 !important; /* Green */
    color: #fff;
}

.btn-status.active-not-paid {
    background-color: #dc3545 !important; /* Red */
    color: #fff;
}

.btn-status.active-not-approved {
    background-color: #ffc107 !important; /* Yellow */
    color: #000;
}
/* Ensure the table takes the full width of its container */
.table {
    width: 100%;
    height: 500px !important;
    border-collapse: collapse;
    font-size: 9px; /* Smaller font size for table content */
    table-layout: fixed; /* Ensures fixed widths are respected */
    overflow: auto; /* To allow scrolling if necessary */
}

/* Ensure the table header stays fixed at the top */
.table thead th {
    position: sticky;
    top: 0;
    background-color: #fff; /* Solid background color for visibility */
    z-index: 2; /* Ensure it stays on top of other content */
}

/* Table header and cells styling */
.table thead th,
.table tbody td {
    text-align: left;
    padding: 6px; /* Reduced padding for a smaller appearance */
    border: 1px solid #dee2e6;
    font-size: 9px; /* Consistent smaller font size */
    width: 120px; /* Fixed width for consistency */
    overflow: hidden; /* Prevent overflow for fixed-width cells */
    text-overflow: ellipsis; /* Add ellipsis for overflowed text */
    white-space: nowrap; /* Prevent text wrapping */
}

.table thead th {
    background-color: #232f65;
    color: #ffffff;
}

/* Hover color for rows */
.table tbody tr:hover {
    background-color: #d0e3ff; 
}

/* Sticky position for the first column (studentname) */
.table tbody td.sticky {
    position: sticky;
    left: 0;
    background-color: #fff;
    z-index: 1;
}

/* Sticky position for the second column (studentid) */
.table tbody td.sticky-second {
    position: sticky;
    left: 120px; /* Adjust based on the width of the first sticky column */
    background-color: #fff;
    z-index: 1;
}

/* Sticky position for the third column */
.table tbody td.sticky-third {
    position: sticky;
    left: 240px; /* Adjust based on the combined width of first and second sticky columns */
    background-color: #fff;
    z-index: 1;
}

/* Sticky position for the fourth column */
.table tbody td.sticky-fourth {
    position: sticky;
    left: 360px; /* Adjust based on the combined width of first, second, and third sticky columns */
    background-color: #fff;
    z-index: 1;
}

/* Ensure that the sticky headers remain above the sticky columns */
.table thead th.sticky {
    position: sticky !important;
    left: 0 !important;
    z-index: 3 !important;
}

.table thead th.sticky-second {
    position: sticky !important;
    left: 120px !important;
    z-index: 3 !important;
}

.table thead th.sticky-third {
    position: sticky !important;
    left: 240px !important;
    z-index: 3 !important;
}

.table thead th.sticky-fourth {
    position: sticky !important;
    left: 360px !important;
    z-index: 3 !important;
}

/* Adjust other table-related styles if necessary */


.btn-status.active-approved {
    background-color: #17a2b8 !important; /* Teal */
    color: #fff;
}

.btn-status.active-not-done {
    background-color: #ffc107 !important; /* Yellow */
    color: #000;
}

.btn-status.active-done {
    background-color: #28a745 !important; /* Green */
    color: #f4f4f4;
}
/* DataTables styles */
.dataTables_wrapper .dataTables_filter {
    float: right;
    text-align: right;
    margin-bottom: 9px; /* Add margin below the search bar */
}

.dataTables_wrapper .dataTables_filter input {
    margin-left: 0.5em;
    display: inline-block;
    width: auto;
    margin-bottom: 9px; /* Add margin below the search bar */
        position: sticky !important;
}

.dataTables_wrapper .dataTables_length {
    float: left;
    margin-bottom: 9px; /* Add margin below the length dropdown */
}

.dataTables_wrapper .dataTables_info {
    float: left;
}

.dataTables_wrapper .dataTables_paginate {
    float: right;
    margin-top: 9px; /* Add margin above the pagination controls */

}
/* Container for table */
.table-wrapper {
    position: relative; /* To contain the sticky header */
    overflow: auto; /* Allows the table body to scroll */
    height: 450px; /* Set a height for the scrolling area */
}
input, select{
font-size: 9px !important;
color: black !important;
background-color: #dee8f2 !important;
}
/* Button styles */

/* Correct button: Green background for correct answers */
.btn-correct {
    background-color: #28a745; /* Green color */
    color: white;
}

/* Incorrect button: Red background for wrong answers */
.btn-incorrect {
    background-color: #dc3545; /* Red color */
    color: white;
}
button{
    font-size: 9px !important;
}


/* CSS */
.button-57 {
  position: relative;
  overflow: hidden;
  border: 1px solid #18181a;
  color: #18181a;
  display: inline-block;
  font-size: 9px;
  line-height: 15px;
  border-radius: 7px;
  padding: 8px 8px 7px;
  text-decoration: none;
  cursor: pointer;
  background: #fff;
  user-select: none;
  margin-bottom: ;
  -webkit-user-select: none;
  touch-action: manipulation;
}

.button-57 span:first-child {
  position: relative;
  transition: color 600ms cubic-bezier(0.48, 0, 0.12, 1);
  z-index: 10;
}

.button-57 span:last-child {
  color: white;
  display: block;
  position: absolute;
  bottom: 0;
  transition: all 500ms cubic-bezier(0.48, 0, 0.12, 1);
  z-index: 100;
  opacity: 0;
  top: 50%;
  left: 50%;
  transform: translateY(225%) translateX(-50%);
  height: 14px;
  line-height: 13px;
}

.button-57:after {
  content: "";
  position: absolute;
  bottom: -50%;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  transform-origin: bottom center;
  transition: transform 600ms cubic-bezier(0.48, 0, 0.12, 1);
  transform: skewY(9.3deg) scaleY(0);
  z-index: 50;
}

.button-57:hover:after {
  transform-origin: bottom center;
  transform: skewY(9.3deg) scaleY(2);
}

.button-57:hover span:last-child {
  transform: translateX(-50%) translateY(-100%);
  opacity: 1;
  transition: all 900ms cubic-bezier(0.48, 0, 0.12, 1);
}
.container-fluida{
    background-color: #d6d6d6 !important;
    padding: 9px !important;
}
#dataTable{
    background-color: white !important;
}

</style>

</head>

<body>
    <div class="container-xxl position-relative bg-white d-flex p-0" style="background-color: #232f65;">
        <!-- Spinner Start -->
        <div id="spinner" class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center">
            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        <!-- Spinner End -->


        <!-- Sidebar Start -->
        <div class="sidebar pe-4 pb-3" style="background-color: #232f65;">
            <nav class="navbar " style="background-color: #232f65;">
                <a href="index.html" class="navbar-brand mx-4 mb-3">
                    <h3 class="text-primary"> <img src="/images/indian-hub-logo-vert-white-e1662813826792.png" alt="Indian Edu Hub Logo" class="log"></h3>
                </a>
                <div class="d-flex align-items-center ms-4 mb-4" style="background-color: #232f65;">
                      
                    <div class="ms-3" >
                        <h6 class="mb-0 text-white">Indianeduhub</h6>
                        <span style="color: rgb(209, 211, 212);">Client</span>
                    </div>
                </div>
                <div class="navbar-nav w-100" style="background-color: #232f65;">
                    <a href="/client-dashboard" class="nav-item nav-link text-white "><i class="fa fa-tachometer-alt me-2 text-dark"></i>Dashboard</a>
                    <a href="/client-details" class="nav-link  active"><i class="fa fa-laptop me-2"></i>SE Form</a>
                    <div class="nav-item dropdown">
                         <a href="#" class="nav-link dropdown-toggle text-white" data-bs-toggle="dropdown"><i class="fa fa-users me-2 text-dark"></i>Partners</a>
                        <div class="dropdown-menu bg-transparent border-0">
                            <a href="/ap-details" class="dropdown-item active">Partners</a>
                            <a href="/p-details" class="dropdown-item">Affiliate-partners</a>
                        </div>
                    </div>
                    
                </div>
            </nav>
        </div>
        <!-- Sidebar End -->


        <!-- Content Start -->
        <div class="content">
            <!-- Navbar Start -->
            <nav class="navbar navbar-expand bg-light navbar-light sticky-top px-4 py-0">
                <a href="index.html" class="navbar-brand d-flex d-lg-none me-4">
                    <h2 class="text-primary mb-0"><img src="/img/ie.png" alt="Indian Edu Hub Logo" style="height: 30px;"></h2>
                </a>
                <a href="#" class="sidebar-toggler flex-shrink-0">
                    <i class="fa fa-bars"></i>
                </a>
                <form class="d-none d-md-flex ms-4">
                    <input class="form-control border-0" type="search" placeholder="Search">
                </form>
                <div class="navbar-nav align-items-center ms-auto">
                    
                    <div class="nav-item dropdown">
                        <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                            <i class="fa fa-bell me-lg-2"></i>
                            <span class="d-none d-lg-inline-flex">Notificatin</span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0">
                            <a href="#" class="dropdown-item">
                                <h6 class="fw-normal mb-0">Profile updated</h6>
                                <small>15 minutes ago</small>
                            </a>
                       
                            <hr class="dropdown-divider">
                            <a href="#" class="dropdown-item text-center">See all notifications</a>
                        </div>
                    </div>
                    <div class="nav-item dropdown">
                        <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
                            <img class="rounded-circle me-lg-2" src="/images/anon.webp" alt="" style="width: 40px; height: 40px;">
                            <span class="d-none d-lg-inline-flex">Client</span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0">
                            <a href="#" class="dropdown-item">Log Out</a>
                        </div>
                    </div>
                </div>
            </nav>
            <!-- Navbar End -->



            <div class="container-fluida tt  ">

      <div class="table-responsive">
        <button  id="saveButton" class="button-57" role="button"><span class="text">Save Changes</span><span>Save</span></button>
 <div class="table-wrapper ">
    <table class="table" id="dataTable">
        
      <thead>
        <tr class="bg-light">
          <th>No.</th>
                                <th class="sticky">Date</th>
                               <th >Student ID</th>
                                <th>Mentor</th>
                                <th class="sticky-second">Student Name</th>
                                <th class="sticky-third">Course</th>
                                <th class="sticky-fourth">Specialization</th>
                                <th>Email</th>
                                <th>Mobile Number</th>
                                <th>State</th>
                                <th>City</th>
                                <th>Role</th>
                                <th>Specific Name</th>
                                <th>Service Pack</th>
                                <th>Intake</th>
                                <th>Mentorship</th>
                                <th>Uni Selected</th>
                                <th>Initial Reg</th>
                                 <th>Initial Reg Date</th>
                                <th>Message</th>
                                <th>Uni Paid</th>
                                <th>Uni Fee Paid Date</th>
                                <th>Document Status</th>
                                <th>Doc Approved Date</th>
                                <th>Uni Refund Initiated</th>
                                <th>Date of Uni Refund Initiated</th>
                                <th>IEH Refund Initiated</th>
                                <th>Date of IEH Refund Initiated</th>
                                <th>Scholarship</th>
                                <th>Mode</th>
                                <th>Amount</th>
                                <th>UG/PG</th>
                                <th>Semester Status</th>
                                <th>Batch</th>
                                <th>Enrollment No</th>
                                <th>Application No</th>
                                <th>ID Approved</th>
                                <th>Action</th>
        </tr>
      </thead>
  <tbody>
                            {{#each formData}}
                            <tr data-id="{{_id}}">
                                <td>{{incrementIndex @index}}</td>
                                <td class="text-danger sticky" >{{this.date}}</td>
                                <td class="">{{this.studentid}}</td>
                                <td>{{this.mentor}}</td>
                                <td class="sticky-second">{{this.name}}</td>
                                <td class="sticky-third">{{this.course}}</td>
                                <td class="sticky-fourth">{{this.specialization}}</td>
                                 <td><input type="text" class="form-control" value="{{this.email}}" /></td>
                                <td>{{this.mobile}}</td>
                                <td>{{this.state}}</td>
                                <td>{{this.city}}</td>
                                <td>{{this.role}}</td>
                                <td>{{this.specificName}}</td>
                                <td>{{this.servicePack}}</td>
                                <td>
                                    <select class="form-select" >
                                        <option value="" {{#if (eq this.intake "")}}selected{{/if}}>None</option>
                                        <option value="Next Week" {{#if (eq this.intake "Next Week")}}selected{{/if}}>Next Week</option>
                                        <option value="This Week" {{#if (eq this.intake "This Week")}}selected{{/if}}>This Week</option>
                                        <option value="Month End" {{#if (eq this.intake "Month End")}}selected{{/if}}>Month End</option>
                                        <option value="Next Intake" {{#if (eq this.intake "Next Intake")}}selected{{/if}}>Next Intake</option>
                                        <option value="Done" {{#if (eq this.intake "Done")}}selected{{/if}}>Done</option>
                                    </select>
                                </td>
                                  <td>
                                   {{this.mentorshipStatus}}
                                </td>
                                <td>
  {{#if (eq this.university "Manipal Jaipur University")}}
    <a href="https://login.leadsquared.com/" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Manipal Sikkim University")}}
    <a href="https://login.leadsquared.com/" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Jain Online University")}}
    <a href="https://login.nopaperforms.io/" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Jain ODL University")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Vignan University")}}
    <a href="https://marvin.leadsquared.com" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Amity University")}}
    <a href="https://asodl.amizone.net/affiliatemanagement/clients/cDashboard" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "SVSU")}}
    <a href="https://newiits.s2code.com/users/centers" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Aligarh Muslim University Online")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "KLU Online")}}
    <a href="#" target="http://partner.schoolguru.in">{{this.university}}</a> <!-- Add the correct URL here -->
  {{else if (eq this.university "Mizoram University")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Jamia Hamdard University")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a> <!-- Add the correct URL here -->
  {{else if (eq this.university "Uttaranchal University")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a>
  {{else if (eq this.university "Andhra University")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a> <!-- Add the correct URL here -->
  {{else if (eq this.university "LPU")}}
    <a href="http://partner.schoolguru.in" target="_blank">{{this.university}}</a> <!-- Add the correct URL here -->
    {{else if (eq this.university "amrita university")}}
    <a href="#" target="_blank">{{this.university}}</a> <!-- Add the correct URL here -->
    {{else if (eq this.university "DY Patil University")}}
    <a href="#" target="_blank">{{this.university}}</a> <!-- Add the correct URL here -->
  {{else}}
    {{this.university}}
  {{/if}}
</td>

             <td>
    <!-- Initial Registration Field -->
    <button class="btn btn-status {{#if (eq this.initialRegistration "✔")}}btn-correct{{else}}btn-incorrect{{/if}}"
            onclick="toggleInitialRegistration(this)">
        {{#if (eq this.initialRegistration "✔")}}✔{{else}}✘{{/if}}
    </button>
</td>

<td>
    <!-- Initial Registration Date Field -->
    <input type="date" name="initialDate" class="form-control date-input"
           value="{{this.initialDate}}" onchange="updateInitialDate(this)">
</td>

<td>
    <!-- Message Field with Icon -->
    <button class="btn btn-icon" onclick="openMessageModal('{{this.mobile}}', '{{this.email}}')">
        <i class="fas fa-comment-dots"></i>
    </button>
</td>

                                <td>
                                    <button class="btn btn-status {{#if (eq this.universityPaid "Paid")}}btn-paid{{else}}btn-not-paid{{/if}}" onclick="toggleStatuss(this, 'University Paid')">
                                        {{#if (eq this.universityPaid "Paid")}}Paid{{else}}Not Paid{{/if}}
                                    </button>
                                </td>
                                <td><input type="date" class="form-control" value="{{this.universityPaidDate}}" /></td>
                        <td>
    <button class="btn btn-status {{#if (eq this.documentStatus "Approved")}}btn-approved{{else}}btn-not-approved{{/if}}" onclick="toggleStatus(this, 'Document Status')">
        {{#if (eq this.documentStatus "Approved")}}Approved{{else}}Not Approved{{/if}}
    </button>
</td>
<td>
    <!-- Initial Registration Date Field (docApprovedDate) -->
    <input type="date" name="docApprovedDate" class="form-control date-input"
           value="{{this.docApprovedDate}}" 
           {{#unless (eq this.documentStatus "Approved")}}style="display:none;"{{/unless}}>
</td>

<td class="detail-row">
    <select class="form-select">
        <option value="" {{#if (eq this.unirefundinitiated "")}}selected{{/if}}>Select</option>
        <option value="initiated" {{#if (eq this.unirefundinitiated "initiated")}}selected{{/if}}>Initiated</option>
        <option value="success" {{#if (eq this.unirefundinitiated "success")}}selected{{/if}}>Success</option>
    </select>
</td>
<td class="refund-cell detail-row">
    <input type="date" class="form-control {{#unless (eq this.unirefundinitiated "success")}}d-none{{/unless}}" value="{{this.dateOfRefundInitiateduni}}" />
</td>
<td class="detail-row">
    <select class="form-select">
        <option value="" {{#if (eq this.iehrefundinitiated "")}}selected{{/if}}>Select</option>
        <option value="initiated" {{#if (eq this.iehrefundinitiated "initiated")}}selected{{/if}}>Initiated</option>
        <option value="success" {{#if (eq this.iehrefundinitiated "success")}}selected{{/if}}>Success</option>
    </select>
</td>
<td class="refund-cell detail-row">
    <input type="date" class="form-control {{#unless (eq this.iehrefundinitiated "success")}}d-none{{/unless}}" value="{{this.dateOfRefundInitiatedieh}}" />
</td>


                                  <td><input type="text" class="form-control" value="{{this.scholarship}}" /></td>
                                <td>
                                    <select class="form-select">
                                        <option value="" {{#if (eq this.feepaid "")}}selected{{/if}}>Select</option>
                                        <option value="Semester" {{#if (eq this.feepaid "Semester")}}selected{{/if}}>Semester</option>
                                        <option value="First Year" {{#if (eq this.feepaid "First Year")}}selected{{/if}}>First Year</option>
                                        <option value="Full Fee" {{#if (eq this.feepaid "Full Fee")}}selected{{/if}}>Full Fee</option>
                                        <option value="Yearly Fee With EMI" {{#if (eq this.feepaid "Yearly Fee With EMI")}}selected{{/if}}>Yearly Fee With EMI</option>
                                        <option value="Full Fee - EMI" {{#if (eq this.feepaid "Full Fee - EMI")}}selected{{/if}}>Full Fee - EMI</option>
                                    </select>
                                </td>
                                <td><input type="text" class="form-control" value="{{this.feePaidAmount}}" /></td>
                                    <td>
        <select class="form-select">
            <option value="" {{#if (eq this.degreeType "")}}selected{{/if}}>Select Degree</option>
            <option value="UG" {{#if (eq this.degreeType "UG")}}selected{{/if}}>UG</option>
            <option value="PG" {{#if (eq this.degreeType "PG")}}selected{{/if}}>PG</option>
            <option value="CERTIFICATE COURSE" {{#if (eq this.degreeType "CERTIFICATE COURSE")}}selected{{/if}}>CERTIFICATE COURSE</option>
            <option value="DIPLOMA" {{#if (eq this.degreeType "DIPLOMA")}}selected{{/if}}>DIPLOMA</option>
        </select>
    </td>
                                <td>
                                    <select class="form-select">
                                        <option value="" {{#if (eq this.semesterStatus "")}}selected{{/if}}>Select</option>
                                        <option value="Semester 1" {{#if (eq this.semesterStatus "Semester 1")}}selected{{/if}}>Semester 1</option>
                                        <option value="Semester 2" {{#if (eq this.semesterStatus "Semester 2")}}selected{{/if}}>Semester 2</option>
                                        <option value="Semester 3" {{#if (eq this.semesterStatus "Semester 3")}}selected{{/if}}>Semester 3</option>
                                        <option value="Semester 4" {{#if (eq this.semesterStatus "Semester 4")}}selected{{/if}}>Semester 4</option>
                                        <option value="Semester 5" {{#if (eq this.semesterStatus "Semester 5")}}selected{{/if}}>Semester 5</option>
                                        <option value="Semester 6" {{#if (eq this.semesterStatus "Semester 6")}}selected{{/if}}>Semester 6</option>
                                        <option value="Drop out" {{#if (eq this.semesterStatus "Drop out")}}selected{{/if}} class="text-danger">Drop out</option>
                                        <option value="Course completed" {{#if (eq this.semesterStatus "Course completed")}}selected{{/if}} class="text-success">Course completed</option>
                                    </select>
                                </td>
                                <td>
                                    <select class="form-select">
                                        <option value="" {{#if (or (eq this.batch "") (eq this.batch null))}}selected{{/if}}>None</option>
                                        <option value="JAN BATCH" {{#if (eq this.batch "JAN BATCH")}}selected{{/if}}>JAN BATCH</option>
                                        <option value="JULY BATCH" {{#if (eq this.batch "JULY BATCH")}}selected{{/if}}>JULY BATCH</option>
                                    </select>
                                </td>
                                <td><input type="text" class="form-control" value="{{this.enrollmentNo}}" /></td>
                                 <td><input type="text" class="form-control" value="{{this.applicationNo}}" /></td>
                                <td>
                                    <button class="btn btn-status {{#if (eq this.idApproved "Approved")}}btn-approved{{else}}btn-not-approved{{/if}}" onclick="toggleStatus(this, 'ID Approved')">
                                        {{#if (eq this.idApproved "Approved")}}Approved{{else}}Not Approved{{/if}}
                                    </button>
                                </td>
   <td>
    <button class="btn btn-status {{#if (eq assignaccounts 'Assigned to accounts department')}}btn-paid{{else}}btn-not-paid{{/if}}" 
            onclick="toggleAssignment(this)">
        {{#if (eq assignaccounts 'Assigned to accounts department')}}Assigned to accounts department{{else}}Assign to accounts department{{/if}}
    </button>
</td>




                            </tr>
                            {{/each}}
                        </tbody>
</table>
  
  </div>
     </div>
</div>

 
<script>
    const tableWrapper = document.querySelector('.table-wrapper');
    const stickyHeaders = document.querySelectorAll('.sticky, .sticky-second, .sticky-third, .sticky-fourth'); // Include third and fourth sticky headers

    tableWrapper.addEventListener('scroll', function() {
        if (tableWrapper.scrollLeft > 0) {
            stickyHeaders.forEach(header => {
                header.style.boxShadow = '5px 0 10px rgba(0, 0, 0, 0.5)'; // Right-side light black shadow
                header.style.zIndex = '4'; // Ensure sticky header stays above content
            });
        } else {
            stickyHeaders.forEach(header => {
                header.style.boxShadow = 'none'; // Remove shadow when not scrolling
                header.style.zIndex = '3'; // Restore original z-index
            });
        }
    });
</script>

<!-- Modal Structure -->
<div class="modal" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="messageModalLabel">Send Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- WhatsApp Message TextArea -->
                <div class="mb-3">
                    <label for="whatsappMessage" class="form-label">WhatsApp Message</label>
                    <textarea class="form-control" id="whatsappMessage" rows="5" placeholder="Enter your WhatsApp message"></textarea>
                </div>
                <!-- Email Message TextArea -->
                <div class="mb-3">
                    <label for="emailMessage" class="form-label">Email Message</label>
                    <textarea class="form-control" id="emailMessage" rows="5" placeholder="Enter your Email message"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="sendMessages()">Send</button>
            </div>
        </div>
    </div>
</div>
<script>
    function openMessageModal(mobile, email) {
        // Predefined message content with line breaks suitable for WhatsApp
        const predefinedMessage = `Welcome to Indian Edu Hub💫

We're delighted to have you on board. This is the process you'll follow from the beginning of your studies to the end. We wish you a successful and enriching educational experience!

We're excited to guide you through your educational journey! Here’s a step-by-step overview of our registration and admission process:

1. Registration Process Introduction
2. Fill the Basic Form
3. Document Collection and Verification
4. Add the Lead
5. Registration Fee Payment
6. Admission Process
7. Semester Fee Payment
8. Upload Documents
9. Document Verification
10. Approval Email
11. LMS Details
12. Attend Orientation Classes
13. Community Addition

Here is the Process how the complete Support services will be provided from the Client support team to Students/Clients till they complete their education journey.

Best wishes for your Educational Journey 💐

Thank you 🙂

Team Client Support
Indian Edu Hub`;


        // Set the predefined message in the modal's textareas
        document.getElementById('whatsappMessage').value = predefinedMessage;
        document.getElementById('emailMessage').value = predefinedMessage;

        // Store mobile and email for later use
        document.getElementById('messageModal').dataset.mobile = mobile;
        document.getElementById('messageModal').dataset.email = email;

        // Show the modal
        var myModal = new bootstrap.Modal(document.getElementById('messageModal'));
        myModal.show();
    }

    function sendMessages() {
        const mobile = document.getElementById('messageModal').dataset.mobile;
        const email = document.getElementById('messageModal').dataset.email;
        const whatsappMessage = document.getElementById('whatsappMessage').value;
        const emailMessage = document.getElementById('emailMessage').value;

        // Redirect to WhatsApp with a pre-filled message
        const whatsappUrl = `https://wa.me/${mobile}?text=${encodeURIComponent(whatsappMessage)}`;
        window.open(whatsappUrl, '_blank');

        // Send email using an API or directly via server-side
        fetch('/send-emailclient', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: email,
                message: emailMessage
            })
        }).then(response => response.json())
          .then(data => {
              if (data.success) {
                  alert('Email sent successfully');
              } else {
                  alert('Failed to send email');
              }
          }).catch(error => {
              console.error('Error:', error);
              alert('Error sending email');
          });
    }
</script>




<!-- Include SweetAlert2 for alerts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
       <script>
$(document).ready(function() {
   const table = $('#dataTable').DataTable({
        pageLength: 100, // Default to showing 100 entries
        lengthMenu: [[100, 25, 10, -1], [100, 25, 10, "All"]] // Options for 100, 25, 10, and All entries per page
    });
});

</script>
<script>
$(document).ready(function () {
    // Handle row status for each row on page load
    $('#dataTable tbody tr').each(function () {
        const row = $(this);
        const documentStatus = row.find('td').eq(22).find('button').text().trim();
        handleRowStatus(row, documentStatus);
        toggleDateVisibility(row);  // Ensure dates are shown/hidden on page load
    });

    // Attach the toggleDateVisibility function to the change event of the refund status dropdowns
    $('#dataTable').on('change', 'select', function () {
        const row = $(this).closest('tr');
        toggleDateVisibility(row);
    });

    // Attach the saveData function to the save button
    $('#saveButton').on('click', function () {
        saveData();
    });
});

function toggleDateVisibility(row) {
    const status = {
        unirefund: row.find('td').eq(23).find('select').val(),
        iehrefund: row.find('td').eq(25).find('select').val()
    };

    const uniDateInput = row.find('td').eq(24).find('input');
    const iehDateInput = row.find('td').eq(26).find('input');

    // Show/hide the date input for 'unirefundinitiated' when it equals 'success'
    uniDateInput.toggleClass('d-none', status.unirefund !== 'success');
    uniDateInput.prop('required', status.unirefund === 'success');

    // Show/hide the date input for 'iehrefundinitiated' when it equals 'success'
    iehDateInput.toggleClass('d-none', status.iehrefund !== 'success');
    iehDateInput.prop('required', status.iehrefund === 'success');
}




function toggleInitialRegistration(button) {
    const currentStatus = $(button).text().trim();
    const newStatus = currentStatus === '✔' ? 'Incorrect' : 'Correct';
    const newClass = currentStatus === '✔' ? 'btn-incorrect' : 'btn-correct';
    const newText = newStatus === 'Correct' ? '✔' : '✘';

    $(button).text(newText)
        .removeClass('btn-correct btn-incorrect')
        .addClass(newClass);

    const row = $(button).closest('tr');
    const rowData = getRowData(row);
    rowData.initialRegistration = newStatus;

    console.log('Row Data:', rowData);
}

function toggleDateVisibility(row) {
    const status = {
        unirefund: row.find('td').eq(24).find('select').val(),
        iehrefund: row.find('td').eq(26).find('select').val()
    };

    const uniDateInput = row.find('td').eq(25).find('input');
    const iehDateInput = row.find('td').eq(27).find('input');

    uniDateInput.toggleClass('d-none', status.unirefund !== 'success');
    iehDateInput.toggleClass('d-none', status.iehrefund !== 'success');

    uniDateInput.prop('required', status.unirefund === 'success');
    iehDateInput.prop('required', status.iehrefund === 'success');
}

function toggleStatuss(button, type) {
    const currentText = $(button).text().trim();
    const statusConfig = {
        'Not Paid': { text: 'Paid', newClass: 'btn-paid' },
        'Paid': { text: 'Not Paid', newClass: 'btn-not-paid' },

        'Not Done': { text: 'Done', newClass: 'btn-done' },
        'Done': { text: 'Not Done', newClass: 'btn-not-done' }
    };

    const newStatus = statusConfig[currentText];
    if (newStatus) {
        $(button).text(newStatus.text)
            .removeClass('btn-not-paid btn-paid ')
            .addClass(newStatus.newClass);

        const row = $(button).closest('tr');
        const rowData = getRowData(row);

        if (type === 'ID Approved') {
            handleIdApproval(row, rowData, newStatus.text);
        }
    }
}

function toggleStatus(button, type) {
    const currentText = $(button).text().trim();
    const statusConfig = {
        'Not Approved': { text: 'Approved', newClass: 'btn-approved' },
        'Approved': { text: 'Not Approved', newClass: 'btn-not-approved' }
    };

    const newStatus = statusConfig[currentText];
    if (newStatus) {
        $(button).text(newStatus.text)
            .removeClass('btn-not-approved btn-approved')
            .addClass(newStatus.newClass);

        const row = $(button).closest('tr');
        handleRowStatus(row, newStatus.text);  // Updated to handle row status

        if (type === 'ID Approved') {
            handleIdApproval(row, getRowData(row), newStatus.text);
        }
    }
}

function handleRowStatus(row, documentStatus) {
    if (documentStatus === 'Approved') {
        // Disable and hide specific columns related to refund statuses
        row.find('td').each(function () {
            const index = $(this).index();

            if (index === 24 || index === 26) {
                $(this).find('select').prop('disabled', true).hide();
            } else if (index === 25 || index === 27) {
                $(this).find('input[type="date"]').prop('disabled', true).hide();
            }
        });

        // Show the docApprovedDate field if the document status is 'Approved'
        row.find('input[name="docApprovedDate"]').prop('disabled', false).show();
    } else {
        // Show and enable specific columns related to refund statuses
        row.find('td').each(function () {
            const index = $(this).index();

            if (index === 24 || index === 26) {
                $(this).find('select').prop('disabled', false).show();
            } else if (index === 25 || index === 27) {
                $(this).find('input[type="date"]').prop('disabled', false).show();
            }
        });

        // Hide the docApprovedDate field if the document status is 'Not Approved'
        row.find('input[name="docApprovedDate"]').prop('disabled', true).hide();
    }
}

 


function getRowData(row) {
    return {
        id: row.data('id'),
        date: row.find('td').eq(1).text().trim(),
        studentid: row.find('td').eq(2).text().trim(),
        mentor: row.find('td').eq(3).text().trim(),
        name: row.find('td').eq(4).text().trim(),
        course: row.find('td').eq(5).text().trim(),
        specialization: row.find('td').eq(6).text().trim(),
         email: row.find('td').eq(7).find('input').val() || '',
        mobile: row.find('td').eq(8).text().trim(),
        state: row.find('td').eq(9).text().trim(),
        city: row.find('td').eq(10).text().trim(),
        role: row.find('td').eq(11).text().trim(),
        specificName: row.find('td').eq(12).text().trim(),
        servicePack: row.find('td').eq(13).text().trim(),
        intake: row.find('td').eq(14).find('select').val() || '',
        mentorshipStatus: row.find('td').eq(15).text().trim(),
        university: row.find('td').eq(16).text().trim(),
        initialRegistration: row.find('td').eq(17).find('button').text().trim(),
        initialDate: row.find('td').eq(18).find('input').val() || '',
        message: row.find('td').eq(19).find('button').text().trim(),
        universityPaid: row.find('td').eq(20).find('button').text().trim(),
        universityPaidDate: row.find('td').eq(21).find('input').val() || '',
        documentStatus: row.find('td').eq(22).find('button').text().trim(),
        docApprovedDate: row.find('td').eq(23).find('input[type="date"]').val() || '', // docApprovedDate added right after documentStatus
        unirefundinitiated: row.find('td').eq(24).find('select').val() || '',
        dateOfRefundInitiateduni: row.find('td').eq(25).find('input').val() || '',
        iehrefundinitiated: row.find('td').eq(26).find('select').val() || '',
        dateOfRefundInitiatedieh: row.find('td').eq(27).find('input').val() || '',
         scholarship: row.find('td').eq(28).find('input').val() || '',
        feepaid: row.find('td').eq(29).find('select').val() || '',
        feePaidAmount: row.find('td').eq(30).find('input').val() || '',
        degreeType: row.find('td').eq(31).find('select').val() || '',
        semesterStatus: row.find('td').eq(32).find('select').val() || '',
        batch: row.find('td').eq(33).find('select').val() || '',
        enrollmentNo: row.find('td').eq(34).find('input').val() || '',
        applicationNo: row.find('td').eq(35).find('input').val() || '',
        idApproved: row.find('td').eq(36).find('button').text().trim(),
        assignaccounts: row.find('td').eq(37).find('button').text().trim()
    };
}



function toggleAssignment(button) {
    const row = $(button).closest('tr');
    const rowData = getRowData(row);

    const isAssigned = $(button).text().trim() === 'Assigned to accounts department';
    const newAssignStatus = isAssigned ? 'Assign to accounts department' : 'Assigned to accounts department';
    const newButtonClass = isAssigned ? 'btn-not-paid' : 'btn-paid';

    $(button).text(newAssignStatus)
        .removeClass('btn-paid btn-not-paid')
        .addClass(newButtonClass);

    rowData.assignaccounts = newAssignStatus;

    $.post('/update-client-details', rowData)
        .done(() => {
            Swal.fire({
                title: 'Success!',
                text: 'Assignment status updated successfully.',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        })
        .fail(() => {
            Swal.fire({
                title: 'Error!',
                text: 'Update failed. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
}

function handleIdApproval(row, rowData, newStatus) {
    if (newStatus === 'Approved') {
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to approve this ID?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, approve it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                const missingFields = validateFields(rowData);

                if (missingFields.length) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Please fill in all required fields before approving ID. Missing fields: ' + missingFields.join(', '),
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }

                const randomPassword = Math.random().toString(36).slice(-8);
                rowData.password = randomPassword;
                rowData.idApproved = 'Approved';

                $.post('/update-client-details', rowData)
                    .done(() => {
                        Swal.fire({
                            title: 'Success!',
                            text: 'ID has been approved successfully. Password: ' + randomPassword,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    })
                    .fail(() => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Update failed. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
            }
        });
    } else if (newStatus === 'Not Approved') {
        Swal.fire({
            title: 'Are you sure?',
            text: 'Do you want to reject this ID?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, reject it!',
            cancelButtonText: 'Cancel'
        }).then((result) => {
            if (result.isConfirmed) {
                rowData.idApproved = 'Not Approved';

                $.post('/update-client-details', rowData)
                    .done(() => {
                        Swal.fire({
                            title: 'Success!',
                            text: 'ID has been rejected successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK'
                        });
                    })
                    .fail(() => {
                        Swal.fire({
                            title: 'Error!',
                            text: 'Update failed. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    });
            }
        });
    }
}

function validateFields(data) {
    // Define the required fields
    const requiredFields = [
        'id',
        'date',
        'studentid',
        'mentor',
        'name',
        'course',
        'specialization',
        'email',
        'mobile',
        'state',
        'city',
        'role',
        'specificName',
        'servicePack',
        'intake',
        'mentorshipStatus',
        'university',
        'initialRegistration',
        'initialDate',
        'universityPaid',
        'universityPaidDate',
        'documentStatus',
        'scholarship',
        'feepaid',
        'feePaidAmount',
        'semesterStatus',
        'batch',
        'enrollmentNo',
        'applicationNo',
        'idApproved',
        'degreeType'
    ];

    // Define the fields that should be required only if documentStatus is 'Not Approved'
    const conditionalRequiredFields = [
        'unirefundinitiated',
        'dateOfRefundInitiateduni',
        'iehrefundinitiated',
        'dateOfRefundInitiatedieh'
    ];

    // Define the fields that should be required if documentStatus is 'Approved'
    const approvedStatusRequiredFields = [
        'docApprovedDate'
    ];

    if (data.documentStatus === 'Not Approved') {
        // When documentStatus is 'Not Approved', include the conditional fields in validation
        return requiredFields.filter(field => !data[field]) // Ensure all required fields are filled
            .concat(conditionalRequiredFields.filter(field => !data[field])); // Include conditional fields if not filled
    } else if (data.documentStatus === 'Approved') {
        // When documentStatus is 'Approved', make docApprovedDate required
        return requiredFields.filter(field => !data[field]) // Ensure all required fields are filled
            .concat(approvedStatusRequiredFields.filter(field => !data[field])); // Include docApprovedDate if not filled
    } else {
        // When documentStatus is something else, only validate the required fields
        return requiredFields.filter(field => !data[field]);
    }
}


{{!-- function saveTableData() {
    const tableData = [];

    $('#dataTable tbody tr').each(function () {
        const rowData = getRowData($(this));
        tableData.push(rowData);
    });

    $.ajax({
        url: '/update-client-details',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(tableData),
        success: function (response) {
            Swal.fire({
                title: 'Success!',
                text: 'Table data has been saved successfully.',
                icon: 'success',
                confirmButtonText: 'OK'
            });
        },
        error: function () {
            Swal.fire({
                title: 'Error!',
                text: 'Failed to save table data. Please try again.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
} --}}
function saveRowData(row) {
    const rowData = getRowData(row);

    // Remove or ignore fields that should not be saved
    delete rowData.idApproved;

    $.post('/update-client-details', rowData)
        .done(() => {
            console.log('Row updated successfully:', rowData);
        })
        .fail(() => {
            console.log('Update failed for row:', rowData);
        });
}

function saveData() {
    $('#dataTable tbody tr').each(function () {
        saveRowData($(this));  // Call saveRowData for each row
    });

    Swal.fire({
        title: 'Success!',
        text: 'All changes have been saved successfully.',
        icon: 'success',
        confirmButtonText: 'OK'
    });
}

</script>



 

 
  <!-- Additional JavaScript Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="lib/chart/chart.min.js"></script>
  <script src="lib/easing/easing.min.js"></script>
  <script src="lib/waypoints/waypoints.min.js"></script>
  <script src="lib/owlcarousel/owl.carousel.min.js"></script>
  <script src="lib/tempusdominus/js/moment.min.js"></script>
  <script src="lib/tempusdominus/js/moment-timezone.min.js"></script>
  <script src="lib/tempusdominus/js/tempusdominus-bootstrap-4.min.js"></script>

  <!-- Template Javascript -->
  <script src="js/main.js"></script>
</body>
</html>